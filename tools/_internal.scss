/* ==========================================================================
tools._internal
/  ========================================================================== */

/* --------------------------------------------------------------------------
Includes
/  -------------------------------------------------------------------------- */

@use 'sass:math';
@use 'sass:list';
@use 'sass:meta';

/* --------------------------------------------------------------------------
Functions
/  -------------------------------------------------------------------------- */

/**
 * A small, internally-used function to remove the units from a given value.
 */
@function strip-units($value) {
	@return math.div($value, ($value * 0 + 1));
}

/**
 * value-to-em
 * Converts pixels to em based on context
 */
@function value-to-em($value, $context: 16px) {
	@if $value == 0 {
		@return 0;
	}
	@return math.div($value, $context) * 1em;
}

@function list-reverse($list) {
	$length: list.length($list);

	@if $length < 2 {
		@return $list;
	}

	@for $i from 1 through math.floor(math.div($length, 2)) {
		$item: list.nth($list, $i);
		$list: list.set-nth($list, $i, list.nth($list, $i * -1));
		$list: list.set-nth($list, $i * -1, $item);
	}

	@return list.join($list, ());
}

@function list-remove($list, $value, $recursive: false) {
	$result: ();

	@for $i from 1 through list.length($list) {
		@if meta.type-of(list.nth($list, $i)) == list and $recursive {
			$result: list.append(
				$result,
				list-remove(list.nth($list, $i), $value, $recursive)
			);
		} @else if list.nth($list, $i) != $value {
			$result: list.append($result, list.nth($list, $i));
		}
	}

	@return $result;
}
